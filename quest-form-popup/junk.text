// import React, { useState, useEffect } from 'react';
// import axios from 'axios';
// import './PopupForm.css';
// import { BASE_URL, API_KEY, ENTITY_AUTHENTICATION_TOKEN, ENTITY_ID, CAMPAIGN_ID, API_SECRET } from './config';

// const PopupForm = ({ closeForm, setIsAuthenticated }) => {
//     const [email, setEmail] = useState('');
//     const [loading, setLoading] = useState(false);
//     const [error, setError] = useState(null);
//     const [submissionMessage, setSubmissionMessage] = useState('');
//     const [campaignData, setCampaignData] = useState(null);
//     const [currentStep, setCurrentStep] = useState(0);
//     const [formAnswers, setFormAnswers] = useState({});

//     useEffect(() => {
//         const userData = JSON.parse(localStorage.getItem('userData'));
//         if (userData) {
//             setIsAuthenticated(true);
//             fetchCampaignDetails(userData.token, userData.userId);
//         }
//     }, [setIsAuthenticated]);

//     const handleLogin = async (e) => {
//         e.preventDefault();
//         setLoading(true);
//         try {
//             const response = await axios.post('https://staging.questprotocol.xyz/api/users/external/login', {
//                 entityId: ENTITY_ID,
//                 externalUserId: 'example-x012121212',
//                 walletAddress: 'abc@',
//                 email: email
//             }, {
//                 headers: {
//                     'apikey': API_KEY,
//                     'apisecret': API_SECRET,
//                     'entity-authentication-token': ENTITY_AUTHENTICATION_TOKEN
//                 }
//             });

//             const userData = response.data;
//             localStorage.setItem('userData', JSON.stringify(userData));
//             setIsAuthenticated(true);
//             setSubmissionMessage('Login successful!');

//             await fetchCampaignDetails(userData.token, userData.userId);
//             setLoading(false);
//         } catch (error) {
//             setError('Failed to login: ' + (error.response?.data?.message || error.message));
//             setLoading(false);
//         }
//     };

//     const fetchCampaignDetails = async (token, userId) => {
//         try {
//             const response = await axios.get(`${BASE_URL}/entities/${ENTITY_ID}/campaigns/${CAMPAIGN_ID}`, {
//                 headers: {
//                     'apikey': API_KEY,
//                     'token': token,
//                     'userid': userId
//                 },
//                 params: {
//                     variation: 'developer',
//                     platform: 'REACT'
//                 }
//             });

//             const campaignData = response.data.data;
//             setCampaignData(campaignData);
//             console.log(campaignData); // Log campaign data to console for debugging
//         } catch (error) {
//             setError('Failed to fetch campaign details: ' + (error.response?.data?.message || error.message));
//         }
//     };

//     const handleNextStep = async (e) => {
//         e.preventDefault();
//         if (currentStep < campaignData.actions.length - 1) {
//             setCurrentStep(currentStep + 1);
//         } else {
//             // Final step, submit the form
//             await handleSubmit();
//         }
//     };

//     const handlePrevStep = () => {
//         if (currentStep > 0) {
//             setCurrentStep(currentStep - 1);
//         }
//     };

//     const handleInputChange = (actionId, value) => {
//         setFormAnswers({
//             ...formAnswers,
//             [actionId]: value
//         });
//     };

//     const handleSubmit = async () => {
//         setLoading(true);
//         try {
//             const userData = JSON.parse(localStorage.getItem('userData'));
//             const actions = campaignData.actions.map(action => ({
//                 actionId: action.actionId,
//                 answers: [formAnswers[action.actionId]]
//             }));
    
//             const payload = {
//                 actions: actions.filter(action => action.answers[0] !== null && action.answers[0] !== ''), // Remove null or empty values
//                 campaignVariationId: campaignData.campaignVariationId
//             };
    
//             console.log('Submitting payload:', JSON.stringify(payload, null, 2));
    
//             const response = await axios.post(`${BASE_URL}/entities/${ENTITY_ID}/campaigns/${CAMPAIGN_ID}/verify`, payload, {
//                 headers: {
//                     'apikey': API_KEY,
//                     'token': userData.token,
//                     'userid': userData.userId
//                 }
//             });
    
//             setSubmissionMessage('Form submitted successfully!');
//             setLoading(false);
//             console.log(response.data); // Log response data to console for debugging
//             closeForm();
    
//         } catch (error) {
//             console.error('Error details:', error.response?.data || error.message);
//             setError('Failed to submit form: ' + (error.response?.data?.message || error.message));
//             setLoading(false);
//         }
//     };
    

//     return (
//         <div className="popup-form open">
//             <button className="close-button" onClick={closeForm}>Close</button>
//             <div className="form-content">
//                 {!loading && !localStorage.getItem('userData') && (
//                     <form onSubmit={handleLogin}>
//                         <label>
//                             Email:
//                             <input type="email" value={email} onChange={(e) => setEmail(e.target.value)} />
//                         </label>
//                         <button type="submit">Login</button>
//                     </form>
//                 )}
//                 {loading && <div>Loading...</div>}
//                 {error && <div className="error">{error}</div>}
//                 {submissionMessage && <div>{submissionMessage}</div>}
//                 {campaignData && (
//                     <form onSubmit={handleNextStep}>
//                         {campaignData.actions.map((action, index) => (
//                             index === currentStep && (
//                                 <div key={action.actionId}>
//                                     <label>{action.title}</label>
//                                     {action.actionType === 'USER_INPUT_TEXT' && (
//                                         <input
//                                             type="text"
//                                             value={formAnswers[action.actionId] || ''}
//                                             onChange={(e) => handleInputChange(action.actionId, e.target.value)}
//                                         />
//                                     )}
//                                     {action.actionType === 'USER_INPUT_EMAIL' && (
//                                         <input
//                                             type="email"
//                                             value={formAnswers[action.actionId] || ''}
//                                             onChange={(e) => handleInputChange(action.actionId, e.target.value)}
//                                         />
//                                     )}
//                                     {action.actionType === 'USER_INPUT_NUMBER' && (
//                                         <input
//                                             type="number"
//                                             value={formAnswers[action.actionId] || ''}
//                                             onChange={(e) => handleInputChange(action.actionId, e.target.value)}
//                                         />
//                                     )}
//                                     {action.actionType === 'USER_INPUT_SINGLE_CHOICE' && (
//                                         <select
//                                             value={formAnswers[action.actionId] || ''}
//                                             onChange={(e) => handleInputChange(action.actionId, e.target.value)}
//                                         >
//                                             <option value="" disabled>Select an option</option>
//                                             {action.options.map(option => (
//                                                 <option key={option} value={option}>{option}</option>
//                                             ))}
//                                         </select>
//                                     )}
//                                     <div className="form-navigation">
//                                         {currentStep > 0 && <button type="button" onClick={handlePrevStep}>Back</button>}
//                                         <button type="submit">{currentStep < campaignData.actions.length - 1 ? 'Next' : 'Submit'}</button>
//                                     </div>
//                                 </div>
//                             )
//                         ))}
//                     </form>
//                 )}
//             </div>
//         </div>
//     );
// };

// export default PopupForm;
import React, { useState, useEffect } from 'react';
import axios from 'axios';
import './PopupForm.css';
import { BASE_URL, API_KEY, ENTITY_AUTHENTICATION_TOKEN, ENTITY_ID, CAMPAIGN_ID, API_SECRET } from './config';

const PopupForm = ({ closeForm, setIsAuthenticated }) => {
    const [email, setEmail] = useState('');
    const [loading, setLoading] = useState(false);
    const [error, setError] = useState(null);
    const [submissionMessage, setSubmissionMessage] = useState('');
    const [campaignData, setCampaignData] = useState(null);
    const [currentStep, setCurrentStep] = useState(1);
    const [formAnswers, setFormAnswers] = useState({
        firstName: '',
        lastName: '',
        emailAddress: '',
        company: '',
        phoneNumber: '',
        jobTitle: '',
        industry: '',
        numberOfEmployees: '',
        country: '',
        howDidYouHear: ''
    });

    useEffect(() => {
        const userData = JSON.parse(localStorage.getItem('userData'));
        if (userData) {
            setIsAuthenticated(true);
            fetchCampaignDetails(userData.token, userData.userId);
        }
    }, [setIsAuthenticated]);

    const handleLogin = async (e) => {
        e.preventDefault();
        setLoading(true);
        try {
            const response = await axios.post('https://staging.questprotocol.xyz/api/users/external/login', {
                entityId: ENTITY_ID,
                externalUserId: 'example-x012121212',
                walletAddress: 'abc@',
                email: email
            }, {
                headers: {
                    'apikey': API_KEY,
                    'apisecret': API_SECRET,
                    'entity-authentication-token': ENTITY_AUTHENTICATION_TOKEN
                }
            });

            const userData = response.data;
            localStorage.setItem('userData', JSON.stringify(userData));
            setIsAuthenticated(true);
            setSubmissionMessage('Login successful!');

            await fetchCampaignDetails(userData.token, userData.userId);
            setLoading(false);
        } catch (error) {
            setError('Failed to login: ' + (error.response?.data?.message || error.message));
            setLoading(false);
        }
    };

    const fetchCampaignDetails = async (token, userId) => {
        try {
            const response = await axios.get(`${BASE_URL}/entities/${ENTITY_ID}/campaigns/${CAMPAIGN_ID}`, {
                headers: {
                    'apikey': API_KEY,
                    'token': token,
                    'userid': userId
                },
                params: {
                    variation: 'developer',
                    platform: 'REACT'
                }
            });

            const campaignData = response.data.data;
            setCampaignData(campaignData);
            console.log(campaignData); // Log campaign data to console for debugging
        } catch (error) {
            setError('Failed to fetch campaign details: ' + (error.response?.data?.message || error.message));
        }
    };

    const handleNextStep = () => {
        setCurrentStep(currentStep + 1);
    };

    const handlePrevStep = () => {
        setCurrentStep(currentStep - 1);
    };

    const handleInputChange = (e) => {
        const { name, value } = e.target;
        setFormAnswers({
            ...formAnswers,
            [name]: value
        });
    };

    const handleSubmit = async () => {
        setLoading(true);
        try {
            const userData = JSON.parse(localStorage.getItem('userData'));
            const actions = campaignData.actions.map(action => ({
                actionId: action.actionId,
                answers: [formAnswers[action.actionId]]
            }));
    
            const payload = {
                actions: actions.filter(action => action.answers[0] !== null && action.answers[0] !== ''), // Remove null or empty values
                campaignVariationId: campaignData.campaignVariationId
            };
    
            console.log('Submitting payload:', JSON.stringify(payload, null, 2));
    
            const response = await axios.post(`${BASE_URL}/entities/${ENTITY_ID}/campaigns/${CAMPAIGN_ID}/verify`, payload, {
                headers: {
                    'apikey': API_KEY,
                    'token': userData.token,
                    'userid': userData.userId
                }
            });
    
            setSubmissionMessage('Form submitted successfully!');
            setLoading(false);
            console.log(response.data); // Log response data to console for debugging
            closeForm();
    
        } catch (error) {
            console.error('Error details:', error.response?.data || error.message);
            setError('Failed to submit form: ' + (error.response?.data?.message || error.message));
            setLoading(false);
        }
    };
    

    return (
        <div className="popup-form open">
            <button className="close-button" onClick={closeForm}>Close</button>
            <div className="form-content">
                {!loading && !localStorage.getItem('userData') && (
                    <form onSubmit={handleLogin}>
                        <label>
                            Email:
                            <input type="email" value={email} onChange={(e) => setEmail(e.target.value)} />
                        </label>
                        <button type="submit">Login</button>
                    </form>
                )}
                {loading && <div>Loading...</div>}
                {error && <div className="error">{error}</div>}
                {submissionMessage && <div>{submissionMessage}</div>}
                {campaignData && (
                    <form onSubmit={handleSubmit}>
                        {currentStep === 1 && (
                            <div>
                                <h3>Your Details</h3>
                                <label>
                                    First Name:
                                    <input
                                        type="text"
                                        name="firstName"
                                        value={formAnswers.firstName}
                                        onChange={handleInputChange}
                                    />
                                </label>
                                <label>
                                    Last Name:
                                    <input
                                        type="text"
                                        name="lastName"
                                        value={formAnswers.lastName}
                                        onChange={handleInputChange}
                                    />
                                </label>
                                <label>
                                    Email Address:
                                    <input
                                        type="email"
                                        name="emailAddress"
                                        value={formAnswers.emailAddress}
                                        onChange={handleInputChange}
                                    />
                                </label>
                                <label>
                                    Company:
                                    <input
                                        type="text"
                                        name="company"
                                        value={formAnswers.company}
                                        onChange={handleInputChange}
                                    />
                                </label>
                                <label>
                                    Phone Number:
                                    <input
                                        type="text"
                                        name="phoneNumber"
                                        value={formAnswers.phoneNumber}
                                        onChange={handleInputChange}
                                    />
                                </label>
                                <label>
                                    Job Title:
                                    <input
                                        type="text"
                                        name="jobTitle"
                                        value={formAnswers.jobTitle}
                                        onChange={handleInputChange}
                                    />
                                </label>
                                <button type="button" onClick={handleNextStep}>Next</button>
                            </div>
                        )}
                        {currentStep === 2 && (
                            <div>
                                <h3>Your Business</h3>
                                <label>
                                    Industry:
                                    <input
                                        type="text"
                                        name="industry"
                                        value={formAnswers.industry}
                                        onChange={handleInputChange}
                                    />
                                </label>
                                <label>
                                    Number of Employees:
                                    <input
                                        type="text"
                                        name="numberOfEmployees"
                                        value={formAnswers.numberOfEmployees}
                                        onChange={handleInputChange}
                                    />
                                </label>
                                <label>
                                    Country:
                                    <input
                                        type="text"
                                        name="country"
                                        value={formAnswers.country}
                                        onChange={handleInputChange}
                                    />
                                </label>
                                <label>
                                    How did you hear about us:
                                    <input
                                        type="text"
                                        name="howDidYouHear"
                                        value={formAnswers.howDidYouHear}
                                        onChange={handleInputChange}
                                    />
                                </label>
                                <button type="button" onClick={handlePrevStep}>Back</button>
                                <button type="submit">Submit</button>
                            </div>
                        )}
                    </form>
                )}
            </div>
        </div>
    );
};

export default PopupForm;